# -*- coding: utf-8 -*-
"""Fantasy_football_predictions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OW38iHPIoin9pkfNakW6nsdlGeKgCqGy
"""

import os
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.stats import pearsonr, spearmanr, ttest_ind
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import KFold
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split

os.listdir('drive/My Drive/Fantasy football')

d_wr = pd.read_csv('drive/My Drive/Fantasy football/FantasyPros_Fantasy_Football_Statistics_WR.csv')
d_wr = d_wr.loc[:, ['Player', 'FPTS', 'FPTS/G']]
_d = pd.read_csv('drive/My Drive/Fantasy football/WR_adv.csv')
d_wr = d_wr.dropna()
_d = _d.dropna()

d_wr = d_wr.merge(_d, on = 'Player')

d_wr.head()

d_wr.dtypes

d_wr['% TM'] = d_wr["% TM"].str.replace("%","")
d_wr['% TM'] = d_wr['% TM'].astype(float)

d_wr.columns

d_wr['BRKTKL/REC']= d_wr['BRKTKL']/d_wr['REC']
d_wr['TGT/G'] = d_wr['TGT']/ d_wr['G']
d_wr['RZ_TGT/G'] = d_wr['RZ TGT']/ d_wr['G']
d_wr['CATCHABLE/G'] = d_wr['CATCHABLE']/ d_wr['G']
d_wr['DROPS/G'] = d_wr['DROP']/ d_wr['G']

d_wr_reg = d_wr.loc[d_wr['TGT'] > 60, ['Player', 'Y/R', 'TGT/G', 'AIR/R', 'YAC/R', 'YACON/R', 'BRKTKL/REC', '% TM',
                                       'RZ_TGT/G', 'CATCHABLE/G', 'DROPS/G', 'FPTS/G']]

d_wr_reg.shape
d_wr_reg = d_wr_reg.reset_index()

features = ['YAC/R', 'AIR/R', '% TM', 'RZ_TGT/G', 'CATCHABLE/G', 'DROPS/G']
target = 'FPTS/G'
kf = KFold(5, shuffle=True, random_state=1)

# create empty out-of-sample pd.Series
oos_preds = pd.Series(dtype=float)

for train_index, test_index in kf.split(d_wr_reg):
  train = d_wr_reg.loc[train_index]
  test = d_wr_reg.loc[test_index]

  # initialize, train, and predict
  model = LinearRegression()
  model.fit(train.loc[:, features], train[target])
  test[f"{target}_pred"] = model.predict(test.loc[:, features])

  # concatenate new preds to oos Series
  oos_preds = pd.concat([oos_preds, test[f'{target}_pred']])

d_wr_reg[f'{target}_pred'] = oos_preds

d_wr_reg = d_wr_reg.sort_values(by=['FPTS/G_pred'], ascending = False)
d_wr_reg['diff'] = d_wr_reg['FPTS/G_pred'] - d_wr_reg['FPTS/G']
d_wr_reg.sort_values(by=['FPTS/G_pred'], ascending = False).head(20)

r2 = pearsonr(d_wr_reg[target], d_wr_reg[f"{target}_pred"])[0]**2
rmse = mean_squared_error(d_wr_reg[target], d_wr_reg[f"{target}_pred"])**0.5
title_str = f"""
R2: {round(r2, 3)}
RMSE: {round(rmse, 3)}
"""

sns.regplot(data = d_wr_reg, x=target, y=f"{target}_pred")
plt.title(title_str)
plt.show()

d_rb = pd.read_csv('drive/My Drive/Fantasy football/FantasyPros_Fantasy_Football_Statistics_RB.csv')
d_rb = d_rb.loc[:, ['Player', 'FPTS', 'FPTS/G']]
_d = pd.read_csv('drive/My Drive/Fantasy football/RB_adv.csv')
d_rb = d_rb.dropna()
_d = _d.dropna()
d_rb = d_rb.merge(_d)

d_rb.columns

d_rb['ATT/G'] = d_rb['ATT']/ d_rb['G']
d_rb['Lyards/ATT'] = d_rb['TK LOSS YDS']/ d_rb['ATT']
d_rb['BRKTKL/ATT'] = d_rb['BRKTKL']/ d_rb['ATT']
d_rb['TGT/G'] = d_rb['TGT']/d_rb['G']
d_rb['RZ_TGT/G'] = d_rb['RZ TGT']/d_rb['G']

d_rb_reg = d_rb.loc[d_rb['ATT'] > 100, ['Player', 'ATT/G', 'Y/ATT', 'YACON/ATT',
                                        'Lyards/ATT', 'BRKTKL/ATT', 'TGT/G', 'RZ_TGT/G', 'FPTS/G']]

d_rb_reg.tail()
d_rb_reg = d_rb_reg.reset_index()

features = ['ATT/G', 'Y/ATT', 'YACON/ATT', 'Lyards/ATT', 'BRKTKL/ATT', 'TGT/G', 'RZ_TGT/G']
target = 'FPTS/G'
kf = KFold(5, shuffle=True, random_state=1)

# create empty out-of-sample pd.Series
oos_preds = pd.Series(dtype=float)

for train_index, test_index in kf.split(d_rb_reg):
  train = d_rb_reg.loc[train_index]
  test = d_rb_reg.loc[test_index]

  # initialize, train, and predict
  model = LinearRegression()
  model.fit(train.loc[:, features], train[target])
  test[f"{target}_pred"] = model.predict(test.loc[:, features])

  # concatenate new preds to oos Series
  oos_preds = pd.concat([oos_preds, test[f'{target}_pred']])

d_rb_reg[f'{target}_pred'] = oos_preds

d_rb_reg = d_rb_reg.sort_values(by=['FPTS/G_pred'], ascending = False)
d_rb_reg['diff'] = d_rb_reg['FPTS/G_pred'] - d_rb_reg['FPTS/G']
d_rb_reg.sort_values(by=['diff'], ascending = False).head(40)

d_rbr2 = pearsonr(d_rb_reg[target], d_rb_reg[f"{target}_pred"])[0]**2
rmse = mean_squared_error(d_rb_reg[target], d_rb_reg[f"{target}_pred"])**0.5
title_str = f"""
R2: {round(r2, 3)}
RMSE: {round(rmse, 3)}
"""

sns.regplot(data = d_rb_reg, x=target, y=f"{target}_pred")
plt.title(title_str)
plt.show()

